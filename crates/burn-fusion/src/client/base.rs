use std::future::Future;

use crate::{
    FusionBackend, FusionDevice, FusionHandle, FusionRuntime, FusionTensor,
    stream::{OperationStreams, StreamId, execution::Operation},
};
use burn_ir::{OperationIr, TensorId, TensorIr};
use burn_tensor::TensorData;

/// Define how to interact with the fusion server.
pub trait FusionClient<R>: Send + Sync + Clone + Sized
where
    R: FusionRuntime<FusionClient = Self>,
{
    /// Create a new client for the given [device](FusionRuntime::FusionDevice).
    fn new(device: FusionDevice<R>) -> Self;
    /// Register a new [tensor operation intermediate representation](OperationIr).
    ///
    /// Returns the new (uninitialized) output tensor(s) generated by the registered operation.
    fn register<O>(
        &self,
        streams: OperationStreams,
        repr: OperationIr,
        operation: O,
    ) -> Vec<FusionTensor<R>>
    where
        O: Operation<R> + 'static;
    /// Register all lazy computation.
    fn drain(&self);
    /// Get the current device used by all operations handled by this client.
    fn device(&self) -> &FusionDevice<R>;
    /// Create a new (uninitialized) empty tensor handle and returns its corresponding [tensor id](TensorId).
    fn create_empty_handle(&self) -> TensorId;
    /// Create a tensor with the given handle and returns its corresponding [tensor id](TensorId)
    fn register_tensor_handle(&self, handle: FusionHandle<R>) -> TensorId;
    /// Read the values contained by a float tensor.
    fn read_tensor_float<B>(
        self,
        tensor: TensorIr,
        stream: StreamId,
    ) -> impl Future<Output = TensorData> + Send
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Read the values contained by an int tensor.
    fn read_tensor_int<B>(
        self,
        tensor: TensorIr,
        stream: StreamId,
    ) -> impl Future<Output = TensorData> + Send
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Read the values contained by a bool tensor.
    fn read_tensor_bool<B>(
        self,
        tensor: TensorIr,
        stream: StreamId,
    ) -> impl Future<Output = TensorData> + Send
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Read the values contained by a quantized tensor.
    fn read_tensor_quantized<B>(
        self,
        tensor: TensorIr,
        streams: StreamId,
    ) -> impl Future<Output = TensorData> + Send
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Resolve the given float tensor to a primitive tensor.
    fn resolve_tensor_float<B>(&self, tensor: FusionTensor<R>) -> B::FloatTensorPrimitive
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Resolve the given int tensor to a primitive tensor.
    fn resolve_tensor_int<B>(&self, tensor: FusionTensor<R>) -> B::IntTensorPrimitive
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Resolve the given bool tensor to a primitive tensor.
    fn resolve_tensor_bool<B>(&self, tensor: FusionTensor<R>) -> B::BoolTensorPrimitive
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Change the client of the given float tensor.
    fn change_client_float<B>(
        &self,
        tensor: TensorIr,
        client: Self,
        stream: StreamId,
    ) -> FusionTensor<R>
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Change the client of the given int tensor.
    fn change_client_int<B>(
        &self,
        tensor: TensorIr,
        client: Self,
        stream: StreamId,
    ) -> FusionTensor<R>
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Change the client of the given bool tensor.
    fn change_client_bool<B>(
        &self,
        tensor: TensorIr,
        client: Self,
        stream: StreamId,
    ) -> FusionTensor<R>
    where
        B: FusionBackend<FusionRuntime = R>;
    /// Change the client of the given quantized tensor.
    fn change_client_quantized<B>(
        &self,
        tensor: TensorIr,
        client: Self,
        stream: StreamId,
    ) -> FusionTensor<R>
    where
        B: FusionBackend<FusionRuntime = R>;
}

/// Extension trait to extract outputs when registering an operation.
pub trait OperationOutput<R: FusionRuntime> {
    /// Extract a single output tensor.
    ///
    /// # Panics
    ///
    /// Panics if the operation produced more or fewer than one output.
    fn output(self) -> FusionTensor<R>;

    /// Extract a pair of output tensors.
    ///
    /// # Panics
    ///
    /// Panics if the operation produced more or fewer than two outputs.
    fn outputs(self) -> (FusionTensor<R>, FusionTensor<R>);
}

impl<R: FusionRuntime> OperationOutput<R> for Vec<FusionTensor<R>> {
    fn output(mut self) -> FusionTensor<R> {
        debug_assert_eq!(self.len(), 1, "expected single output, got {}", self.len());
        self.pop().unwrap()
    }

    fn outputs(mut self) -> (FusionTensor<R>, FusionTensor<R>) {
        debug_assert_eq!(self.len(), 2, "expected two outputs, got {}", self.len());
        let b = self.pop().unwrap();
        let a = self.pop().unwrap();
        (a, b)
    }
}
