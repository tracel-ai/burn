name: dependencies

on:
  schedule:
    - cron: '0 21 * * TUE' # Run every Tuesday at 21:00 (UTC)
  push:
    tags:
      - 'v*.*.*' # Run when a new version is being published

env:
  #
  # Dependency versioning
  #

  # Udeps version
  UDEPS_VERSION: "0.1.57"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependencies:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        checks:
          - licenses
          - bans sources

    continue-on-error: ${{ matrix.checks == 'licenses' }} # failed licenses don't abort

    steps:

      - name: checkout
        uses: actions/checkout@v5

      - name: Audit Rust dependencies (cargo-audit)
        # Run cargo-audit and save the report. If advisories are found the job will fail
        run: |
          set -eux
          cargo install --locked cargo-audit || true
          mkdir -p target/audit
          # Save both machine and human readable output so CI can upload it
          cargo audit -q || true
          cargo audit --json > target/audit/rustsec-report.json || true
          cargo audit > target/audit/rustsec-report.txt || true
          # Fail the job if any advisory is present (non-empty JSON array in report)
          if [ -s target/audit/rustsec-report.json ]; then
            # If the report contains advisories, exit 2 to mark failure and upload artifact in next step
            jq '.vulnerabilities[]?' target/audit/rustsec-report.json >/dev/null 2>&1 && exit 2 || true
          fi

      - name: Upload audit report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: rustsec-report
          path: target/audit/

      - name: Detect multiple versions of the same crate
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check ${{ matrix.checks }}

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
          components: rustfmt

      - name: Install cargo-udeps
        env:
          UDEPS_LINK: https://github.com/est31/cargo-udeps/releases/download
        run: |
          curl -L "$UDEPS_LINK/v$UDEPS_VERSION/cargo-udeps-v$UDEPS_VERSION-x86_64-unknown-linux-gnu.tar.gz" |
          tar xz -C $HOME/.cargo/bin --strip-components 2

      - name: Run cargo-udeps
        run: |
          cargo +nightly udeps --all-targets
